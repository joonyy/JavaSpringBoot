<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--XML 선언 및 DOCTYPE 작성. xml 문서의 버전 인코딩 선언, MyBatis DTd(Document type definition) 지정-->
<mapper namespace="codingon.spring_boot_mybatis.mapper.UserMapper">
<!-- 매퍼의 네임스페이스 정의 (UserMapper 인터페이스의 경로 지정)-->

    <!-- XML 기반의 MyBatis 매퍼 사용 -->

<!--  UserMapper의 findAll() 메소드에 매핑된다.  -->
<!--  select 태그의 속성 정리
        - id : UserMapper 인터페이스의 메서드 이름과 일치(이름 값으로 쿼리를 식별하고 호출함)
        - resultType : 쿼리에 전달되는 매핑할 객체의 타입 지정
            (쿼리결과가 각 행을 개별적으로 매핑하기에, MyBatis 기준으로 쿼리 결과가 여러 행이면 자동으로 리스트 변환.)
        - parameterType : 쿼리에 전달되는 파라미터 타입 지정.(ex. long, string, User(클래스명) 등.)
  -->
    <select id="findAll" resultType="codingon.spring_boot_mybatis.domain.User">
        SELECT * FROM users
    </select>
    <select id="findById" parameterType="Long" resultType="codingon.spring_boot_mybatis.domain.User">
        select * from users where id = #{id}
    </select>

<!--  Insert 태그의 속성 정리
    - id : UserMapper 인터페이스의 메서드 이름과 일치(이름 값으로 쿼리를 식별하고 호출함)
    - parameterType : 삽입할 객체의 타입 지정
    - useGeneratedKeys :  DB 에서 자동생성된 키를 사용할지 여부를 지정.
    - keyProperty : 자동생성된 키 값을 저장할 파라미터 객체의 속성명 지정.

  -->
    <insert id="insert" parameterType="codingon.spring_boot_mybatis.domain.User"
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO users (username, email) values (#{username},#{email})
    </insert>

<!--  update 태그의 속성
    - id : UserMapper 인터페이스의 메서드 이름과 일치
    - parameterType : 업데이트할 데이터 객체의 타입 지정.
  -->

    <update id="update" parameterType="codingon.spring_boot_mybatis.domain.User">
        update users set username = #{username}, email = #{email} where id = #{id}
    </update>

<!--  delete 태그의 속성
      - id : UserMapper 인터페이스의 메서드 이름과 일치.
      - parameterType : 삭제할 조건에 사용될 파라미터 타입 지정.
-->
    <delete id="delete" parameterType="long">
        delete from users where id = #{id}
    </delete>

</mapper>